unit ControlPWM;

interface
const
//Device type definition
VAI_USBADC	=	1;
VCI_USBCAN1	=	3;
VCI_USBCAN2	=	4;
VGI_USBGPIO	=	1;
VII_USBI2C	=	1;
VSI_USBSPI	=	2;
//错误码定义
ERR_SUCCESS					      =	(0);		// 没有错误
ERR_PARAMETER_NULL			  =	(-1);	  // 传入的指针为空指针
ERR_INPUT_DATA_TOO_MUCH		=	(-2);	  // 参数输入个数多余规定个数
ERR_INPUT_DATA_TOO_LESS		=	(-3);	  // 参数输入个数少余规定个数
ERR_INPUT_DATA_ILLEGALITY	=	(-4);	  // 参数传入格式和规定的不符合
ERR_USB_WRITE_DATA			  =	(-5);	  // USB写数据错误
ERR_USB_READ_DATA			    =	(-6);	  // USB读数据错误
ERR_READ_NO_DATA			    =	(-7);	  // 请求读数据时返回没有数据
ERR_OPEN_DEVICE				    =	(-8);	  // 打开设备失败
ERR_CLOSE_DEVICE			    =	(-9);	  // 关闭设备失败
ERR_EXECUTE_CMD				    =	(-10);	// 设备执行命令失败
ERR_SELECT_DEVICE			    =	(-11);	// 选择设备失败
ERR_DEVICE_OPENED			    =	(-12);	// 设备已经打开
ERR_DEVICE_NOTOPEN			  =	(-13);	// 设备没有打开
ERR_BUFFER_OVERFLOW			  =	(-14);	// 缓冲区溢出
ERR_DEVICE_NOTEXIST			  =	(-15);	// 此设备不存在
ERR_LOAD_KERNELDLL			  =	(-16);	// 装载动态库失败
ERR_CMD_FAILED				    =	(-17);	// 执行命令失败错误码
ERR_BUFFER_CREATE			    =	(-18);	// 内存不足
//定义GPIO引脚号
VPI_PWM_CH0		= (1 shl 0);	//PWM_CH0
VPI_PWM_CH1		= (1 shl 1);	//PWM_CH1
VPI_PWM_CH2		= (1 shl 2);	//PWM_CH2
VPI_PWM_CH3		= (1 shl 3);	//PWM_CH3
VPI_PWM_CH4		= (1 shl 4);	//PWM_CH4
VPI_PWM_CH5		= (1 shl 5);	//PWM_CH5
VPI_PWM_CH6		= (1 shl 6);	//PWM_CH6
VPI_PWM_CH7		= (1 shl 7);	//PWM_CH7
VPI_PWM_ALL   = ($FF);      //PWM_ALL

//USB-PWM初始化结构体
type
PVPI_INIT_CONFIG = ^VPI_INIT_CONFIG;
VPI_INIT_CONFIG = record
  PWM_ChannelMask:Byte; //PWM索引号，每个bit对应一个通道
  PWM_Mode:Byte;        //PWM模式，取值0或者1
  PWM_Pulse:Byte;       //PWM占空比,0到100之间取值
  PWM_Polarity:Byte;    //PWM输出极性，取值0或者1
  PWM_Frequency:Integer;//PWM频率,1到1000000之间取值
end;

//函数声明
function VPI_ScanDevice(NeedInit:Byte):Integer; stdcall;
function VPI_OpenDevice(DevType,DevIndex,Reserved:Integer):Integer; stdcall;
function VPI_CloseDevice(DevType,DevIndex:Integer):Integer; stdcall;
function VPI_InitPWM(DevType,DevIndex:Integer;pInitConfig:PVPI_INIT_CONFIG);
function VPI_StartPWM(DevType,DevIndex:Integer; ChannelMask:Byte);
function VPI_StopPWM(DevType,DevIndex:Integer; ChannelMask:Byte);
function VPI_SetPWMPulse(DevType,DevIndex:Integer; ChannelMask:Byte,uint8_t *pPulse);
function VPI_SetPWMPeriod(DevType,DevIndex:Integer;, uint8_t ChannelMask,uint32_t *Frequency);
implementation

end.
